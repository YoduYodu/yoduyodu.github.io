{"version":3,"sources":["view/Navbar.js","view/content/Card.js","view/content/CenteredGrid.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","DenseAppBar","classes","className","AppBar","position","Toolbar","variant","IconButton","edge","color","aria-label","Typography","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","SimpleCard","Card","CardContent","gutterBottom","component","CardActions","Button","size","paper","padding","textAlign","palette","text","secondary","image","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","CenteredGrid","Grid","container","item","xs","src","Paper","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAQMA,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,OAIhB,SAASC,IACtB,IAAMC,EAAUT,IAEhB,OACE,yBAAKU,UAAWD,EAAQN,MACtB,kBAACQ,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASC,QAAQ,WACf,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQN,UAAWD,EAAQJ,WAAYY,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYL,QAAQ,KAAKG,MAAM,WAA/B,e,yDCnBJjB,EAAYC,YAAW,CAC3BmB,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,MAIH,SAASC,IACtB,IAAMrB,EAAUT,IACH,0BAAMU,UAAWD,EAAQa,QAAzB,UAEb,OACE,kBAACS,EAAA,EAAD,CAAMrB,UAAWD,EAAQW,MACvB,kBAACY,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,CAAYT,UAAWD,EAAQiB,MAAOT,MAAM,gBAAgBgB,cAAY,GAAxE,cAGA,kBAACd,EAAA,EAAD,CAAYL,QAAQ,KAAKoB,UAAU,MAAnC,wBAGA,kBAACf,EAAA,EAAD,CAAYT,UAAWD,EAAQmB,IAAKX,MAAM,iBAA1C,WAGA,kBAACE,EAAA,EAAD,CAAYL,QAAQ,QAAQoB,UAAU,KAAtC,gCAEE,6BACC,yBAGL,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAAb,gB,qBCzCFrC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZkC,MAAO,CACLC,QAASrC,EAAMK,QAAQ,GACvBiC,UAAW,SACXvB,MAAOf,EAAMuC,QAAQC,KAAKC,WAE5BC,MAAO,CACLC,gBAAiB,2IACjBC,iBAAkB,YAClBC,eAAgB,QAChBC,mBAAoB,aAIT,SAASC,IACtB,IAAMxC,EAAUT,IAEhB,OACE,yBAAKU,UAAWD,EAAQN,MACtB,kBAAC+C,EAAA,EAAD,CAAMC,WAAS,EAAC5C,QAAS,GAUvB,kBAAC2C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI3C,UAAWD,EAAQmC,OACpC,kBAAC,IAAD,CAAOU,IAAI,yIAEb,kBAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACvB,EAAD,OAEF,kBAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACE,EAAA,EAAD,CAAO7C,UAAWD,EAAQ6B,OAA1B,QAEF,kBAACY,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACE,EAAA,EAAD,CAAO7C,UAAWD,EAAQ6B,OAA1B,QAEF,kBAACY,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACE,EAAA,EAAD,CAAO7C,UAAWD,EAAQ6B,OAA1B,UC9CV,IAOekB,EAPH,kBACV,6BACE,kBAAChD,EAAD,MACA,kBAACyC,EAAD,QCGgBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.02d755d3.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function DenseAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"regular\">\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Projects\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function SimpleCard() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>â€¢</span>;\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          Oct-2-2019\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          Image Classification\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          3 think\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          A project of machine learning\n          <br />\n          {'\"a benevolent smile\"'}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport SimpleCard from './Card';\nimport Image from 'material-ui-image';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  image: {\n    backgroundImage: 'url(https://images.unsplash.com/photo-1558979158-65a1eaa08691?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=3300&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n}));\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        {/* <Grid item xs={12}>\n          <Paper className={classes.paper}>xs=12</Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>xs=6</Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>xs=6</Paper>\n        </Grid> */}\n        <Grid item xs={12} className={classes.image}>\n          <Image src='https://images.unsplash.com/photo-1558979158-65a1eaa08691?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=3300&q=80' />\n        </Grid>\n        <Grid item xs={3}>\n          <SimpleCard />\n        </Grid>\n        <Grid item xs={3}>\n          <Paper className={classes.paper}>TBA</Paper>\n        </Grid>\n        <Grid item xs={3}>\n          <Paper className={classes.paper}>TBA</Paper>\n        </Grid>\n        <Grid item xs={3}>\n          <Paper className={classes.paper}>TBA</Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport DenseAppBar from './view/Navbar';\nimport CenteredGrid from './view/content/CenteredGrid';\n\nconst App = () => (\n  <div>\n    <DenseAppBar />\n    <CenteredGrid />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}