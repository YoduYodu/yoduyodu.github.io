{"version":3,"sources":["view/footer/Copyright.js","view/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","Date","getFullYear","useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","footer","Album","classes","Fragment","CssBaseline","AppBar","position","Toolbar","Grid","container","item","xs","noWrap","alignItems","Button","href","target","className","Container","maxWidth","component","gutterBottom","paragraph","justify","key","sm","md","Card","CardMedia","image","title","CardContent","CardActions","size","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64af8096.chunk.js","sourcesContent":["import React from 'react';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright ¬© '}\n    <Link color=\"inherit\">\n      Tong Wang\n    </Link>{' '}\n    {new Date().getFullYear()}\n    {'.'}\n    </Typography>\n  );\n}\n\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Copyright from './footer/Copyright';\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nconst cards = [1, 2, 3];\n\nexport default function Album() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n          <AppBar color=\"primary\" position=\"relative\">\n            <Toolbar>\n              <Grid container>\n                <Grid item xs={11}>\n                  <Typography variant=\"h6\" color=\"default\" noWrap>\n                    Home\n                  </Typography>\n\n                </Grid>\n\n              </Grid>\n\n              <Grid item xs={1} alignItems='flex-end'>\n                <Button variant=\"contained\" color=\"secondary\" href='https://www.linkedin.com/in/wang7ong/' target='_blank'>\n                  Linkedin\n                </Button>\n              </Grid>\n              \n            </Toolbar>\n          </AppBar>\n        \n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              I'm üë®‚Äçüíª, üë®‚Äçüé®, ‚öæÔ∏èplayer, \n              <br/>\n              also an problem solver.\n            </Typography>\n              <Typography variant=\"h5\" align=\"center\" color=\"primary\" paragraph>\n                They say you need a website for job hunting, I say a creator must have a repository. \n                <br/>\n                But first, check out the resume here : ) ‚¨áÔ∏è\n              </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button variant=\"contained\" color=\"secondary\" href=\"Resume.pdf\" target=\"_blank\">\n                    View resume\n                  </Button>\n                </Grid>\n                {/* <Grid item>\n                  <Button variant=\"outlined\" color=\"primary\">\n                    Secondary action\n                  </Button>\n                </Grid> */}\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {/* {cards.map(card => ( */}\n              <Grid item key={1} xs={12} sm={6} md={4}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    image=\"ds.png\"\n                    title=\"Image title\"\n                  />\n                  <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Data Visualization\n                    </Typography>\n                    <Typography>\n                      Visualize the U.S. housing market\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\" href=\"https://usf-cs360-spring2019.github.io/project-YoduYodu/\" target=\"_blank\">\n                      View\n                    </Button>\n                    {/* <Button size=\"small\" color=\"primary\">\n                      Edit\n                    </Button> */}\n                  </CardActions>\n                </Card>\n              </Grid>\n            {/* ))} */}\n          </Grid>\n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Built by React.js and Golang\n        </Typography>\n        <Copyright />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Homepage from './view/Homepage';\n\nconst App = () => (\n  <div>\n    <Homepage />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}