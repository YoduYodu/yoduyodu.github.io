{"version":3,"sources":["view/homepage/Display.js","view/homepage/Cards.js","view/homepage/Header.js","view/homepage/Footer.js","serviceWorker.js","index.js","App.js"],"names":["useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","Display","classes","Fragment","CssBaseline","className","Container","maxWidth","Typography","component","variant","align","color","gutterBottom","paragraph","Grid","container","justify","item","Button","href","target","Cards","key","xs","sm","md","Card","CardMedia","image","title","CardContent","CardActions","size","Header","AppBar","position","Toolbar","noWrap","alignItems","footer","Footer","Link","Date","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ace6bce.chunk.js","sourcesContent":["import React from 'react';\n\nimport Button from '@material-ui/core/Button';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\n\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  }\n  \n}));\n\n\nexport default function Display() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      {/* Hero unit */}\n      <div className={classes.heroContent}>\n        <Container maxWidth=\"sm\">\n          <Typography component=\"h1\" variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom>\n            I'm üë®üèª‚Äçüíª, üë®üèª‚Äçüé®, üèÉüèª‚Äç,\n            <br/>\n            also,\n            <br/>\n            a problem solver.\n          </Typography>\n            <Typography variant=\"h5\" align=\"center\" color=\"primary\" paragraph>\n              They say you need a website for job hunting, I say a creator must have a repository. \n              <br/>\n              But first, check out the resume here : )\n            </Typography>\n          <div className={classes.heroButtons}>\n            <Grid container spacing={2} justify=\"center\">\n              <Grid item>\n                <Button variant=\"contained\" color=\"secondary\" href=\"Resume.pdf\" target=\"_blank\">\n                  View resume\n                </Button>\n              </Grid>\n            </Grid>\n          </div>\n        </Container>\n      </div>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n    cardGrid: {\n        paddingTop: theme.spacing(8),\n        paddingBottom: theme.spacing(8),\n    },\n    card: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    cardMedia: {\n        paddingTop: '56.25%', // 16:9\n    },\n    cardContent: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Cards() {\n    const classes = useStyles();\n    \n    return (\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n        {/* End hero unit */}\n        <Grid container spacing={4}>\n        {/* {cards.map(card => ( */}\n            <Grid item key={1} xs={12} sm={6} md={4}>\n            <Card className={classes.card}>\n            <CardMedia\n            className={classes.cardMedia}\n            image=\"ds.png\"\n            title=\"Image title\"\n            />\n            <CardContent className={classes.cardContent}>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Data Visualization\n            </Typography>\n            <Typography>\n            Visualize the U.S. housing market\n            </Typography>\n            </CardContent>\n            <CardActions>\n            <Button size=\"small\" color=\"primary\" href=\"https://usf-cs360-spring2019.github.io/project-YoduYodu/\" target=\"_blank\">\n            View\n            </Button>\n            {/* <Button size=\"small\" color=\"primary\">\n            Edit\n        </Button> */}\n        </CardActions>\n        </Card>\n        </Grid>\n        {/* ))} */}\n        </Grid>\n        </Container>\n        );\n    }\n    \n    ","import AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nexport default function Header() {\n  return (\n    <AppBar color=\"primary\" position=\"relative\">\n      <Toolbar>\n        <Grid container>\n          <Grid item xs={11}>\n            <Typography variant=\"h6\" color=\"default\" noWrap>\n              Home\n            </Typography>\n          </Grid>\n        </Grid>\n        \n        <Grid item xs={1} alignItems='flex-end'>\n          <Button variant=\"contained\" color=\"secondary\" href='https://www.linkedin.com/in/wang7ong/' target='_blank'>\n            Linkedin\n          </Button>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\n\nconst useStyles = makeStyles(theme => ({\n    footer: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(6),\n    },\n}))\n\nexport default function Footer() {\n    const classes = useStyles();\n    \n    return (\n        <React.Fragment>\n            <footer className={classes.footer}>\n                <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n                    Built by React.js and Golang\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n                    {'Copyright ¬© '}\n                    <Link color=\"inherit\">\n                        Tong Wang\n                    </Link>{' '}\n                    {new Date().getFullYear()}\n                    {'.'}\n                </Typography>\n            </footer>\n            \n        </React.Fragment>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport Display from './view/homepage/Display';\nimport Cards from './view/homepage/Cards';\nimport Header from './view/homepage/Header';\nimport Footer from './view/homepage/Footer';\n\nexport default function App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <Display />\n      <Cards />\n      <Footer />\n    </React.Fragment>\n  )\n}"],"sourceRoot":""}